{"version":3,"sources":["context/Auth.context.js","components/Search.js","components/Card.js","components/Alert.js","pages/GithubReposPage.js","pages/LocalReposPage.js","pages/DetailPage.js","pages/AuthPage.js","hooks/message.hook.js","hooks/http.hook.js","components/Navbar.js","App.js","hooks/auth.hook.js","routes.js","serviceWorker.js","index.js"],"names":["noop","AuthContext","createContext","token","userId","login","logout","isAuthenticated","Search","className","value","id","type","onKeyPress","event","key","console","log","htmlFor","Card","src","alt","to","Alert","alert","role","text","aria-label","aria-hidden","GithubReposPage","cards","Array","fill","map","_","i","Fragment","card","LocalReposPage","DetailPage","AuthPage","auth","useContext","message","useCallback","window","M","toast","html","useState","loading","setLoading","error","setError","request","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","clearError","useHttp","email","password","form","setForm","useEffect","updateTextFields","changeHandler","target","name","registerHandler","loginHandler","placeholder","onChange","style","marginRight","onClick","disabled","Navbar","history","useHistory","padding","href","preventDefault","push","App","setToken","setUserId","jwtToken","localStorage","setItem","removeItem","parse","getItem","useAuth","routes","path","exact","useRoutes","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.31ea16ee.chunk.js","sourcesContent":["import {createContext} from 'react'\r\n\r\nfunction noop() {}\r\n\r\nexport const AuthContext = createContext({\r\n  token: null,\r\n  userId: null,\r\n  login: noop,\r\n  logout: noop,\r\n  isAuthenticated: false\r\n})","import React from \"react\";\r\nimport 'materialize-css'\r\n\r\nexport const Search = () => {\r\n  const onSubmit = event => {\r\n    if (event.key === 'Enter') {\r\n      console.log(event);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"input-field col s6\">\r\n        <input value=\"\" id=\"first_name2\" type=\"text\" onKeyPress={onSubmit}/>\r\n          <label className=\"active\" htmlFor=\"first_name2\">Github User Name</label>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport {Link} from 'react-router-dom'\r\nimport 'materialize-css'\r\n\r\nexport const Card = () => (\r\n      <div className=\"card\">\r\n        <div className=\"card-image\">\r\n          <img src=\"https://picsum.photos/500\" alt={''} className=\"\"/>\r\n            <span className=\"card-title\">Card Title</span>\r\n        </div>\r\n        <div className=\"card-action\">\r\n          <Link to={'/profile/'} className=\"\" >Open</Link>\r\n        </div>\r\n      </div>\r\n)\r\n","import React from 'react';\r\nimport './Alert.css'\r\n\r\nexport const Alert = ({alert}) => {\r\n\r\n  return (\r\n    <div className={`Alert alert-${alert.type || 'secondary'} alert-dismissible`} role=\"alert\">\r\n      {alert.text}\r\n      <button type=\"button\" className=\"close\" aria-label=\"Close\">\r\n        <span aria-hidden=\"true\">&times;</span>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport {Search} from \"../components/Search\";\r\nimport {Card} from \"../components/Card\";\r\nimport {Alert} from \"../components/Alert\";\r\n\r\nexport const GithubReposPage = () => {\r\n  const cards = new Array(20).fill('').map((_, i) => i);\r\n\r\n  return (\r\n  <React.Fragment>\r\n    <h5>на этой странице мы ищем репозитории в github</h5>\r\n    <Alert alert={{text: 'some alert'}}/>\r\n    <Search />\r\n    <div className=\"row\">\r\n      {cards.map(card => {\r\n        return (\r\n          <div className=\"col s3 m4\" key={card}>\r\n            <Card />\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  </React.Fragment>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const LocalReposPage = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <h1>на этой странице мы работаем с локальными репозиториями</h1>\r\n    </React.Fragment>\r\n  )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const DetailPage = () => {\r\n  return (\r\n    <div>\r\n      <h1>Detail Page</h1>\r\n    </div>\r\n  )\r\n}","import React, {useContext, useEffect, useState} from \"react\";\r\nimport {useHttp} from \"../hooks/http.hook\";\r\nimport {useMessage} from \"../hooks/message.hook\";\r\nimport {AuthContext} from \"../context/Auth.context\";\r\n\r\nexport const AuthPage = () => {\r\n  const auth = useContext(AuthContext)\r\n  const message = useMessage()\r\n  const {loading, request, error, clearError} = useHttp()\r\n  const [form, setForm] = useState({\r\n    email: '', password: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    message(error)\r\n    clearError()\r\n  }, [error, message, clearError])\r\n\r\n  useEffect(() => {\r\n    window.M.updateTextFields()\r\n  }, [])\r\n\r\n  const changeHandler = event => {\r\n    setForm({...form, [event.target.name]: event.target.value })\r\n  }\r\n\r\n  const registerHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/register', 'POST', {...form})\r\n      message(data.message)\r\n      console.log('Data', data)\r\n    } catch (e) {}\r\n  }\r\n\r\n  const loginHandler = async () => {\r\n    try {\r\n      const data = await request('/api/auth/login', 'POST', {...form})\r\n      auth.login(data.token, data.userId)\r\n    } catch (e) {}\r\n  }\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s6 offset-s3\">\r\n        <h1>Git R A</h1>\r\n        <div className=\"card blue-grey darken-1\">\r\n          <div className=\"card-content white-text\">\r\n            <span className=\"card-title\">Authorization</span>\r\n            <div>\r\n\r\n              <div className=\"input-field\">\r\n                <input placeholder=\"Enter email\" id=\"email\" type=\"text\" name=\"email\"\r\n                       onChange={changeHandler} />\r\n                <label htmlFor=\"email\">Email</label>\r\n              </div>\r\n\r\n              <div className=\"input-field\">\r\n                <input placeholder=\"Enter password\" id=\"password\" type=\"password\" name=\"password\"\r\n                       onChange={changeHandler} />\r\n                <label htmlFor=\"email\">Password</label>\r\n              </div>\r\n\r\n            </div>\r\n          </div>\r\n          <div className=\"card-action\">\r\n            <button\r\n              className=\"btn yellow darken-4\"\r\n              style={{marginRight: 20}}\r\n              onClick={loginHandler}\r\n              disabled={loading}>\r\n              Enter\r\n            </button>\r\n            <button\r\n              className=\"btn grey lighten-1 black-text\"\r\n              onClick={registerHandler}\r\n              disabled={loading}>\r\n              Registration\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n","import {useCallback} from 'react'\r\n\r\nexport const useMessage = () => {\r\n  return useCallback((text) => {\r\n    if (window.M && text) {\r\n      window.M.toast({html: text})\r\n    }\r\n  }, [])\r\n};","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n\r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n    setLoading(true);\r\n\r\n    try {\r\n      if (body) {\r\n        body = JSON.stringify(body)\r\n        headers['Content-Type'] = 'application/json'\r\n      }\r\n\r\n      const response = await fetch(url, {method, body, headers})\r\n      const data = await response.json()\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Http request error')\r\n      }\r\n\r\n      setLoading(false);\r\n\r\n      return data\r\n    } catch (e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e;\r\n    }\r\n  }, [])\r\n\r\n  const clearError = useCallback(() => setError(null), [])\r\n\r\n  return {loading, request, error, clearError }\r\n}","import React, {useContext} from 'react'\r\nimport {NavLink, useHistory} from 'react-router-dom'\r\nimport {AuthContext} from \"../context/Auth.context\";\r\n\r\nexport const Navbar = () => {\r\n  const history = useHistory()\r\n  const auth = useContext(AuthContext)\r\n  const logoutHandler = (event) => {\r\n    event.preventDefault()\r\n    auth.logout()\r\n    history.push('/')\r\n  }\r\n\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper\" style={{padding: '0 2rem'}}>\r\n        <a href=\"/\" className=\"brand-logo\">Logo</a>\r\n        <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n          <li><NavLink to='/create'>Local</NavLink></li>\r\n          <li><NavLink to='/links'>Github</NavLink></li>\r\n          <li><a href=\"/\" onClick={logoutHandler}>Logout</a></li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  )\r\n};\r\n","import React from 'react'\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport {AuthContext} from \"./context/Auth.context\";\r\nimport {useRoutes} from \"./routes\"\r\nimport {useAuth} from \"./hooks/auth.hook\";\r\nimport 'materialize-css'\r\nimport {Navbar} from \"./components/Navbar\";\r\n\r\nfunction App() {\r\n  const {login, logout, token, userId} = useAuth()\r\n  const isAuthenticated = !!token\r\n  // const isAuthenticated = true\r\n  const routes = useRoutes(isAuthenticated)\r\n  return (\r\n    <AuthContext.Provider value={{login, logout, token, userId, isAuthenticated}}>\r\n      <Router>\r\n        { isAuthenticated && <Navbar/> }\r\n        <div className=\"container\">\r\n          {routes}\r\n        </div>\r\n      </Router>\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import {useState, useCallback, useEffect} from 'react'\r\n\r\nconst storageName = 'userData'\r\n\r\nexport const useAuth = () => {\r\n  const [token, setToken] = useState(null)\r\n  const [userId, setUserId] = useState(null)\r\n\r\n  const login = useCallback((jwtToken, id) => {\r\n    setToken(jwtToken)\r\n    setUserId(id)\r\n\r\n    localStorage.setItem(storageName, JSON.stringify({\r\n      userId: id, token: jwtToken\r\n    }))\r\n  }, [])\r\n\r\n  const logout = useCallback(() => {\r\n    setToken(null)\r\n    setUserId(null)\r\n    localStorage.removeItem(storageName)\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    const data = JSON.parse(localStorage.getItem(storageName))\r\n\r\n    if (data && data.token) {\r\n      login(data.token, data.userId)\r\n    }\r\n  }, [login])\r\n\r\n  return {login, logout, token, userId}\r\n};","import React from \"react\";\r\nimport {Switch, Route, Redirect} from \"react-router-dom\";\r\nimport {GithubReposPage} from \"./pages/GithubReposPage\";\r\nimport {LocalReposPage} from \"./pages/LocalReposPage\";\r\nimport {DetailPage} from \"./pages/DetailPage\";\r\nimport {AuthPage} from \"./pages/AuthPage\";\r\n\r\nexport const useRoutes = (isAuthenticated) => {\r\n  if (isAuthenticated) {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/links\" exact>\r\n          <GithubReposPage/>\r\n        </Route>\r\n        <Route path=\"/create\" exact>\r\n          <LocalReposPage/>\r\n        </Route>\r\n        <Route path=\"/detail/:id\">\r\n          <DetailPage/>\r\n        </Route>\r\n        <Route path=\"/profile/:id\">\r\n          <DetailPage/>\r\n        </Route>\r\n        <Redirect to=\"/create\"/>\r\n      </Switch>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/\" exact>\r\n        <AuthPage/>\r\n      </Route>\r\n      <Redirect to=\"/\"/>\r\n    </Switch>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}